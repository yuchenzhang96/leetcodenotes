136. 只出现一次的数字
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,1]
输出: 1
示例 2:

输入: [4,1,2,1,2]
输出: 4

1. 哈希表，储存数字出现的次数，两次遍历
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map<int, int> map;
        for (int num : nums) {
            map[num]++;
        }
        for (auto elm : map) {
            if (elm.second == 1) { // 刚开始写成了指针...
                return elm.first;
            }
        }
        return 0;
    }
};

2. 使用位运算

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0;
        for (int num : nums) {
            res ^= num;
        }
        return res;
    }
};

对于本题来说最重要的是除了一个数是一个，其余数均是两个，在做完异或运算后仅剩下一个数。

重点：了解异或运算的特点

对于这道题，可使用异或运算 \oplus⊕。异或运算有以下三个性质。

任何数和0做异或运算，结果仍然是原来的数，即 a \oplus 0= a ⊕ 0 =a。
任何数和其自身做异或运算，结果是0，即 a \oplus a= a ⊕ a =0。
异或运算满足交换律和结合律，即 a \oplus b \oplus a=b \oplus a \oplus a=b \oplus (a \oplus a)=b \oplus0=ba⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。
